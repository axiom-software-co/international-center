version: '3.8'

services:
  # =============================================================================
  # Core Database Services
  # =============================================================================
  postgresql:
    image: postgres:15-alpine
    container_name: postgresql
    env_file:
      - .env.development
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=development
      - POSTGRES_DB=international_center
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d international_center"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Database Migration Service
  migration:
    image: migrate/migrate:v4.19.0
    container_name: migration
    env_file:
      - .env.development
    environment:
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=development
      - POSTGRES_DB=international_center
    command: [
      "-path", "/migrations",
      "-database", "postgres://postgres:development@postgresql:5432/international_center?sslmode=disable",
      "up"
    ]
    volumes:
      - ./infrastructure/migrations/migrations:/migrations:ro
    networks:
      - international-center-network
    depends_on:
      postgresql:
        condition: service_healthy
    restart: "no"

  redis:
    image: redis:7-alpine
    container_name: redis
    env_file:
      - .env.development
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mongodb:
    image: mongo:7.0-jammy
    container_name: mongodb
    env_file:
      - .env.development
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - ${MONGO_DATA_VOLUME}:/data/db
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    env_file:
      - .env.development
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - ${RABBITMQ_DATA_VOLUME}:/var/lib/rabbitmq
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # =============================================================================
  # Dapr Control Plane Services
  # =============================================================================

  dapr-placement:
    image: daprio/dapr:1.12.0
    container_name: dapr-placement
    env_file:
      - .env.development
    command: ["./placement", "--port", "${DAPR_PLACEMENT_PORT}", "--log-level", "info"]
    ports:
      - "${DAPR_PLACEMENT_PORT}:${DAPR_PLACEMENT_PORT}"
    networks:
      - international-center-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${DAPR_PLACEMENT_PORT}/placement/state"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  dapr-sentry:
    image: daprio/dapr:1.12.0
    container_name: dapr-sentry
    env_file:
      - .env.development
    command: ["./sentry", "--port", "${DAPR_SENTRY_PORT}", "--log-level", "info"]
    ports:
      - "${DAPR_SENTRY_PORT}:${DAPR_SENTRY_PORT}"
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${DAPR_SENTRY_PORT}/v1/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # =============================================================================
  # Azure Emulator Services
  # =============================================================================
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:3.29.0
    container_name: azurite
    env_file:
      - .env.development
    command: ["azurite", "--blobHost", "0.0.0.0", "--queueHost", "0.0.0.0", "--tableHost", "0.0.0.0", "--blobPort", "10000", "--queuePort", "10001", "--tablePort", "10002", "--location", "/data", "--debug", "/data/debug.log"]
    ports:
      - "${AZURITE_BLOB_PORT}:10000"
      - "${AZURITE_QUEUE_PORT}:10001"
      - "${AZURITE_TABLE_PORT}:10002"
    volumes:
      - ${AZURITE_DATA_VOLUME}:/data
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10000/devstoreaccount1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped


  # =============================================================================
  # Identity and Security Services
  # =============================================================================
  authentik:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik
    env_file:
      - .env.development
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB}
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD}
      - AUTHENTIK_REDIS__HOST=redis
    command: server
    ports:
      - "${AUTHENTIK_PORT}:9000"
      - "9443:9443"
    networks:
      - international-center-network
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/-/health/live/"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 120s
    restart: unless-stopped

  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik-worker
    env_file:
      - .env.development
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB}
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD}
      - AUTHENTIK_REDIS__HOST=redis
    command: worker
    networks:
      - international-center-network
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  vault:
    image: hashicorp/vault:1.15.2
    container_name: vault
    env_file:
      - .env.development
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID}
      - VAULT_DEV_LISTEN_ADDRESS=${VAULT_DEV_LISTEN_ADDRESS}
    ports:
      - "${VAULT_PORT}:8200"
    volumes:
      - ${VAULT_DATA_VOLUME}:/vault/data
    networks:
      - international-center-network
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  opa:
    image: openpolicyagent/opa:0.59.0-envoy
    container_name: opa
    env_file:
      - .env.development
    command: ["run", "--server", "--addr=0.0.0.0:8181", "--log-level=info"]
    ports:
      - "${OPA_PORT}:8181"
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # =============================================================================
  # Observability Stack
  # =============================================================================
  grafana:
    image: grafana/grafana:10.4.0
    container_name: grafana
    env_file:
      - .env.development
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - ${GRAFANA_DATA_VOLUME}:/var/lib/grafana
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  mimir:
    image: grafana/mimir:2.11.0
    container_name: mimir
    env_file:
      - .env.development
    command: ["-config.file=/etc/mimir/mimir.yaml"]
    ports:
      - "${MIMIR_PORT}:9009"
    volumes:
      - ${MIMIR_DATA_VOLUME}:/data
      - ./observability/mimir.yaml:/etc/mimir/mimir.yaml:ro
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9009/ready"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    env_file:
      - .env.development
    command: ["-config.file=/etc/loki/loki.yaml"]
    ports:
      - "${LOKI_PORT}:3100"
    volumes:
      - ${LOKI_DATA_VOLUME}:/data
      - ./observability/loki.yaml:/etc/loki/loki.yaml:ro
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  tempo:
    image: grafana/tempo:2.4.0
    container_name: tempo
    env_file:
      - .env.development
    command: ["-config.file=/etc/tempo/tempo.yaml"]
    ports:
      - "${TEMPO_PORT}:3200"
      - "14268:14268"  # Jaeger ingest
      - "4317:4317"    # otlp grpc
      - "4318:4318"    # otlp http
      - "9411:9411"    # zipkin
    volumes:
      - ${TEMPO_DATA_VOLUME}:/data
      - ./observability/tempo.yaml:/etc/tempo/tempo.yaml:ro
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  pyroscope:
    image: grafana/pyroscope:1.5.0
    container_name: pyroscope
    env_file:
      - .env.development
    ports:
      - "${PYROSCOPE_PORT}:4040"
    volumes:
      - ${PYROSCOPE_DATA_VOLUME}:/data
    networks:
      - international-center-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4040/api/apps"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  grafana-agent:
    image: grafana/agent:v0.38.0
    container_name: grafana-agent
    env_file:
      - .env.development
    command: ["-config.file=/etc/agent/agent.yaml", "-server.http.address=0.0.0.0:12345"]
    ports:
      - "12345:12345"
    volumes:
      - ./observability/grafana-agent.yaml:/etc/agent/agent.yaml:ro
    networks:
      - international-center-network
    depends_on:
      mimir:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    restart: unless-stopped

networks:
  international-center-network:
    name: ${NETWORK_NAME}
    driver: bridge

volumes:
  postgres-data:
    name: ${POSTGRES_DATA_VOLUME}
  mongodb-data:
    name: ${MONGO_DATA_VOLUME}
  rabbitmq-data:
    name: ${RABBITMQ_DATA_VOLUME}
  grafana-data:
    name: ${GRAFANA_DATA_VOLUME}
  mimir-data:
    name: ${MIMIR_DATA_VOLUME}
  loki-data:
    name: ${LOKI_DATA_VOLUME}
  tempo-data:
    name: ${TEMPO_DATA_VOLUME}
  pyroscope-data:
    name: ${PYROSCOPE_DATA_VOLUME}
  azurite-data:
    name: ${AZURITE_DATA_VOLUME}
  vault-data:
    name: ${VAULT_DATA_VOLUME}
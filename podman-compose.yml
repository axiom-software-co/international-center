version: '3.8'

services:
  # =============================================================================
  # Core Database Services
  # =============================================================================
  postgresql:
    image: postgres:15-alpine
    container_name: postgresql
    env_file:
      - .env.development
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d international_center"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Database Migration Service
  migration:
    image: migrate/migrate:v4.19.0
    container_name: migration
    env_file:
      - .env.development
    command: [
      "-path", "/migrations",
      "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable",
      "up"
    ]
    volumes:
      - ./infrastructure/migrations/migrations:/migrations:ro
    depends_on:
      postgresql:
        condition: service_healthy
    restart: "no"

  redis:
    image: redis:7-alpine
    container_name: redis
    env_file:
      - .env.development
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped


  # =============================================================================
  # Azure Emulator Services
  # =============================================================================
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:3.29.0
    container_name: azurite
    env_file:
      - .env.development
    command: ["azurite", "--blobHost", "0.0.0.0", "--blobPort", "10000", "--location", "/data", "--debug", "/data/debug.log"]
    ports:
      - "${AZURITE_BLOB_PORT}:10000"
    volumes:
      - azurite-data:/data
    healthcheck:
      disable: true
    restart: unless-stopped


  # =============================================================================
  # Dapr Control Plane
  # =============================================================================
  dapr-placement:
    image: daprio/dapr:1.14.1
    container_name: dapr-placement
    env_file:
      - .env.development
    command: ["./placement", "--port", "50006", "--log-level", "info"]
    ports:
      - "${DAPR_PLACEMENT_PORT}:50006"
    healthcheck:
      disable: true
    restart: unless-stopped


  # =============================================================================
  # Microservices APIs
  # =============================================================================
  services-api-dapr:
    image: daprio/daprd:1.14.1
    container_name: services-api-dapr
    env_file:
      - .env.development
    command: ["./daprd", 
      "--app-id", "services-api", 
      "--app-port", "${SERVICES_API_PORT}", 
      "--dapr-http-port", "3500",
      "--dapr-grpc-port", "50001",
      "--metrics-port", "9090",
      "--components-path", "/components",
      "--config", "/config/config.yaml",
      "--placement-host-address", "dapr-placement:50006"
    ]
    ports:
      - "${SERVICES_API_PORT}:${SERVICES_API_PORT}"
      - "${SERVICES_API_DAPR_HTTP_PORT}:3500"
    volumes:
      - ./dapr/components:/components:ro
      - ./dapr/config:/config:ro
    depends_on:
      dapr-placement:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped

  services-api:
    build: 
      context: .
      dockerfile: ./cmd/services-api/Dockerfile
    container_name: services-api
    network_mode: "container:services-api-dapr"
    env_file:
      - .env.development
    environment:
      - SERVICES_API_PORT=${SERVICES_API_PORT}
      - DATABASE_CONNECTION_STRING=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/${POSTGRES_DB}?sslmode=disable
      - DAPR_GRPC_ENDPOINT=127.0.0.1:50001
    depends_on:
      services-api-dapr:
        condition: service_started
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  content-api-dapr:
    image: daprio/daprd:1.14.1
    container_name: content-api-dapr
    env_file:
      - .env.development
    command: ["./daprd", 
      "--app-id", "content-api", 
      "--app-port", "${CONTENT_API_PORT}", 
      "--dapr-http-port", "3500",
      "--dapr-grpc-port", "50002",
      "--metrics-port", "9091",
      "--components-path", "/components",
      "--config", "/config/config.yaml",
      "--placement-host-address", "dapr-placement:50006"
    ]
    ports:
      - "${CONTENT_API_PORT}:${CONTENT_API_PORT}"
      - "${CONTENT_API_DAPR_HTTP_PORT}:3500"
    volumes:
      - ./dapr/components:/components:ro
      - ./dapr/config:/config:ro
    depends_on:
      dapr-placement:
        condition: service_started
      postgresql:
        condition: service_healthy
    restart: unless-stopped

  content-api:
    build: 
      context: .
      dockerfile: ./cmd/content-api/Dockerfile
    container_name: content-api
    network_mode: "container:content-api-dapr"
    env_file:
      - .env.development
    environment:
      - CONTENT_API_PORT=${CONTENT_API_PORT}
      - DATABASE_CONNECTION_STRING=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/${POSTGRES_DB}?sslmode=disable
      - DAPR_GRPC_ENDPOINT=127.0.0.1:50002
    depends_on:
      content-api-dapr:
        condition: service_started
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  public-gateway-dapr:
    image: daprio/daprd:1.14.1
    container_name: public-gateway-dapr
    env_file:
      - .env.development
    command: ["./daprd", 
      "--app-id", "public-gateway", 
      "--app-port", "${PUBLIC_GATEWAY_PORT}", 
      "--dapr-http-port", "3500",
      "--dapr-grpc-port", "50003",
      "--metrics-port", "9092",
      "--components-path", "/components",
      "--config", "/config/config.yaml",
      "--placement-host-address", "dapr-placement:50006"
    ]
    ports:
      - "${PUBLIC_GATEWAY_PORT}:${PUBLIC_GATEWAY_PORT}"
      - "${PUBLIC_GATEWAY_DAPR_HTTP_PORT}:3500"
    volumes:
      - ./dapr/components:/components:ro
      - ./dapr/config:/config:ro
    depends_on:
      dapr-placement:
        condition: service_started
    restart: unless-stopped

  public-gateway:
    build: 
      context: .
      dockerfile: ./cmd/public-gateway/Dockerfile
    container_name: public-gateway
    network_mode: "container:public-gateway-dapr"
    env_file:
      - .env.development
    environment:
      - PUBLIC_GATEWAY_PORT=${PUBLIC_GATEWAY_PORT}
      - RATE_LIMIT_PER_MINUTE=${PUBLIC_GATEWAY_RATE_LIMIT}
      - DAPR_GRPC_ENDPOINT=127.0.0.1:50003
    depends_on:
      public-gateway-dapr:
        condition: service_started
      services-api:
        condition: service_healthy
      content-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  admin-gateway-dapr:
    image: daprio/daprd:1.14.1
    container_name: admin-gateway-dapr
    env_file:
      - .env.development
    command: ["./daprd", 
      "--app-id", "admin-gateway", 
      "--app-port", "${ADMIN_GATEWAY_PORT}", 
      "--dapr-http-port", "3500",
      "--dapr-grpc-port", "50004",
      "--metrics-port", "9093",
      "--components-path", "/components",
      "--config", "/config/config.yaml",
      "--placement-host-address", "dapr-placement:50006"
    ]
    ports:
      - "${ADMIN_GATEWAY_PORT}:${ADMIN_GATEWAY_PORT}"
      - "${ADMIN_GATEWAY_DAPR_HTTP_PORT}:3500"
    volumes:
      - ./dapr/components:/components:ro
      - ./dapr/config:/config:ro
    depends_on:
      dapr-placement:
        condition: service_started
      authentik:
        condition: service_started
    restart: unless-stopped

  admin-gateway:
    build: 
      context: .
      dockerfile: ./cmd/admin-gateway/Dockerfile
    container_name: admin-gateway
    network_mode: "container:admin-gateway-dapr"
    env_file:
      - .env.development
    environment:
      - ADMIN_GATEWAY_PORT=${ADMIN_GATEWAY_PORT}
      - SERVICES_API_URL=http://services-api-dapr:${SERVICES_API_PORT}
      - CONTENT_API_URL=http://content-api-dapr:${CONTENT_API_PORT}
      - RATE_LIMIT_PER_MINUTE=${ADMIN_GATEWAY_RATE_LIMIT}
      - DAPR_GRPC_ENDPOINT=127.0.0.1:50004
    depends_on:
      admin-gateway-dapr:
        condition: service_started
      services-api:
        condition: service_healthy
      content-api:
        condition: service_healthy
      authentik:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # =============================================================================
  # Identity and Security Services
  # =============================================================================
  authentik:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik
    env_file:
      - .env.development
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=${POSTGRES_HOST}
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB}
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD}
      - AUTHENTIK_REDIS__HOST=${REDIS_HOST}
    command: server
    ports:
      - "${AUTHENTIK_PORT}:9000"
      - "${AUTHENTIK_HTTPS_PORT}:9443"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      disable: true
    restart: unless-stopped

  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik-worker
    env_file:
      - .env.development
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=${POSTGRES_HOST}
      - AUTHENTIK_POSTGRESQL__NAME=${POSTGRES_DB}
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD}
      - AUTHENTIK_REDIS__HOST=${REDIS_HOST}
    command: worker
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  vault:
    image: hashicorp/vault:1.15.2
    container_name: vault
    env_file:
      - .env.development
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID}
      - VAULT_DEV_LISTEN_ADDRESS=${VAULT_DEV_LISTEN_ADDRESS}
    ports:
      - "${VAULT_PORT}:8200"
    volumes:
      - vault-data:/vault/data
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://0.0.0.0:8200/v1/sys/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  opa:
    image: openpolicyagent/opa:0.59.0-envoy
    container_name: opa
    env_file:
      - .env.development
    command: ["run", "--server", "--addr=0.0.0.0:8181", "--log-level=info"]
    ports:
      - "${OPA_PORT}:8181"
    healthcheck:
      disable: true
    restart: unless-stopped

  # =============================================================================
  # Observability Stack
  # =============================================================================
  grafana:
    image: grafana/grafana:10.4.0
    container_name: grafana
    env_file:
      - .env.development
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      # - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  mimir:
    image: grafana/mimir:2.11.0
    container_name: mimir
    env_file:
      - .env.development
    command: ["-config.file=/etc/mimir/mimir.yaml"]
    ports:
      - "${MIMIR_PORT}:9009"
    volumes:
      - mimir-data:/data
      - ./observability/mimir.yaml:/etc/mimir/mimir.yaml:ro
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9009/ready"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    env_file:
      - .env.development
    command: ["-config.file=/etc/loki/loki.yaml"]
    ports:
      - "${LOKI_PORT}:3100"
    volumes:
      - loki-data:/data
      - ./observability/loki.yaml:/etc/loki/loki.yaml:ro
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  tempo:
    image: grafana/tempo:2.4.0
    container_name: tempo
    env_file:
      - .env.development
    command: ["-config.file=/etc/tempo/tempo.yaml"]
    ports:
      - "${TEMPO_PORT}:3200"
      - "${TEMPO_JAEGER_PORT}:14268"  # Jaeger ingest
      - "${TEMPO_OTLP_GRPC_PORT}:4317"    # otlp grpc
      - "${TEMPO_OTLP_HTTP_PORT}:4318"    # otlp http
      - "${TEMPO_ZIPKIN_PORT}:9411"    # zipkin
    volumes:
      - tempo-data:/data
      - ./observability/tempo.yaml:/etc/tempo/tempo.yaml:ro
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  pyroscope:
    image: grafana/pyroscope:1.5.0
    container_name: pyroscope
    env_file:
      - .env.development
    ports:
      - "${PYROSCOPE_PORT}:4040"
    volumes:
      - pyroscope-data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4040/"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  grafana-agent-dapr:
    image: daprio/daprd:1.14.1
    container_name: grafana-agent-dapr
    env_file:
      - .env.development
    command: ["./daprd", 
      "--app-id", "grafana-agent", 
      "--app-port", "${GRAFANA_AGENT_PORT}", 
      "--dapr-http-port", "3500",
      "--dapr-grpc-port", "50005",
      "--metrics-port", "9094",
      "--components-path", "/components",
      "--config", "/config/config.yaml",
      "--placement-host-address", "dapr-placement:50006"
    ]
    ports:
      - "${GRAFANA_AGENT_PORT}:${GRAFANA_AGENT_PORT}"
      - "${GRAFANA_AGENT_DAPR_HTTP_PORT}:3500"
    volumes:
      - ./dapr/components:/components:ro
      - ./dapr/config:/config:ro
    depends_on:
      dapr-placement:
        condition: service_started
    restart: unless-stopped

  grafana-agent:
    image: grafana/agent:v0.38.0
    container_name: grafana-agent
    network_mode: "container:grafana-agent-dapr"
    env_file:
      - .env.development
    environment:
      - GRAFANA_AGENT_PORT=${GRAFANA_AGENT_PORT}
      - DAPR_GRPC_ENDPOINT=127.0.0.1:50005
    command: ["-config.file=/etc/agent/agent.yaml", "-server.http.address=0.0.0.0:${GRAFANA_AGENT_PORT}"]
    volumes:
      - ./observability/grafana-agent.yaml:/etc/agent/agent.yaml:ro
    depends_on:
      grafana-agent-dapr:
        condition: service_started
      mimir:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    restart: unless-stopped

# Using default podman network for better DNS resolution

volumes:
  postgres-data:
  grafana-data:
  mimir-data:
  loki-data:
  tempo-data:
  pyroscope-data:
  azurite-data:
  vault-data: